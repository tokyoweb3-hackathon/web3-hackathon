/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Faucet, FaucetInterface } from "../../contracts/Faucet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_faucetOwnerAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "send",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "updateFaucetDripAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddr",
        type: "address",
      },
    ],
    name: "updateTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600160025534801561001557600080fd5b50604051610e3f380380610e3f83398181016040528101906100379190610122565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610162565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ef826100c4565b9050919050565b6100ff816100e4565b811461010a57600080fd5b50565b60008151905061011c816100f6565b92915050565b60008060408385031215610139576101386100bf565b5b60006101478582860161010d565b92505060206101588582860161010d565b9150509250929050565b610cce806101716000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306b091f9146100515780636691461a1461006d578063b46300ec14610089578063d5407eab14610093575b600080fd5b61006b60048036038101906100669190610733565b6100af565b005b61008760048036038101906100829190610773565b6102dc565b005b6100916103af565b005b6100ad60048036038101906100a891906107a0565b610600565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461013f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101369061082a565b60405180910390fd5b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101999190610859565b60206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e99190610889565b101561022a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022190610902565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610285929190610931565b602060405180830381600087803b15801561029f57600080fd5b505af11580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d79190610992565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103639061082a565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161040a9190610859565b60206040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610889565b1161049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190610a0b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190610a64565b600a6105819190610bf3565b60025461058e9190610c3e565b6040518363ffffffff1660e01b81526004016105ab929190610931565b602060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190610992565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610690576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106879061082a565b60405180910390fd5b8060028190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ca8261069f565b9050919050565b6106da816106bf565b81146106e557600080fd5b50565b6000813590506106f7816106d1565b92915050565b6000819050919050565b610710816106fd565b811461071b57600080fd5b50565b60008135905061072d81610707565b92915050565b6000806040838503121561074a5761074961069a565b5b6000610758858286016106e8565b92505060206107698582860161071e565b9150509250929050565b6000602082840312156107895761078861069a565b5b6000610797848285016106e8565b91505092915050565b6000602082840312156107b6576107b561069a565b5b60006107c48482850161071e565b91505092915050565b600082825260208201905092915050565b7f4661756365744572726f723a2043616c6c6572206e6f74206f776e6572000000600082015250565b6000610814601d836107cd565b915061081f826107de565b602082019050919050565b6000602082019050818103600083015261084381610807565b9050919050565b610853816106bf565b82525050565b600060208201905061086e600083018461084a565b92915050565b60008151905061088381610707565b92915050565b60006020828403121561089f5761089e61069a565b5b60006108ad84828501610874565b91505092915050565b7f4661756365744572726f723a20496e73756666696369656e742066756e647300600082015250565b60006108ec601f836107cd565b91506108f7826108b6565b602082019050919050565b6000602082019050818103600083015261091b816108df565b9050919050565b61092b816106fd565b82525050565b6000604082019050610946600083018561084a565b6109536020830184610922565b9392505050565b60008115159050919050565b61096f8161095a565b811461097a57600080fd5b50565b60008151905061098c81610966565b92915050565b6000602082840312156109a8576109a761069a565b5b60006109b68482850161097d565b91505092915050565b7f4661756365744572726f723a20456d7074790000000000000000000000000000600082015250565b60006109f56012836107cd565b9150610a00826109bf565b602082019050919050565b60006020820190508181036000830152610a24816109e8565b9050919050565b600060ff82169050919050565b610a4181610a2b565b8114610a4c57600080fd5b50565b600081519050610a5e81610a38565b92915050565b600060208284031215610a7a57610a7961069a565b5b6000610a8884828501610a4f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610b1757808604811115610af357610af2610a91565b5b6001851615610b025780820291505b8081029050610b1085610ac0565b9450610ad7565b94509492505050565b600082610b305760019050610bec565b81610b3e5760009050610bec565b8160018114610b545760028114610b5e57610b8d565b6001915050610bec565b60ff841115610b7057610b6f610a91565b5b8360020a915084821115610b8757610b86610a91565b5b50610bec565b5060208310610133831016604e8410600b8410161715610bc25782820a905083811115610bbd57610bbc610a91565b5b610bec565b610bcf8484846001610acd565b92509050818404811115610be657610be5610a91565b5b81810290505b9392505050565b6000610bfe826106fd565b9150610c0983610a2b565b9250610c367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b20565b905092915050565b6000610c49826106fd565b9150610c54836106fd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c8d57610c8c610a91565b5b82820290509291505056fea26469706673582212202bcd68df886ae9daa0b9af6de0b3ce8db23f3c457c11810533541646b7fa3b9764736f6c63430008090033";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _tokenAddress: PromiseOrValue<string>,
    _faucetOwnerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Faucet> {
    return super.deploy(
      _tokenAddress,
      _faucetOwnerAddress,
      overrides || {}
    ) as Promise<Faucet>;
  }
  override getDeployTransaction(
    _tokenAddress: PromiseOrValue<string>,
    _faucetOwnerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tokenAddress,
      _faucetOwnerAddress,
      overrides || {}
    );
  }
  override attach(address: string): Faucet {
    return super.attach(address) as Faucet;
  }
  override connect(signer: Signer): Faucet__factory {
    return super.connect(signer) as Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new utils.Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {
    return new Contract(address, _abi, signerOrProvider) as Faucet;
  }
}
